@{
    ViewData["Title"] = "AI Profit Forecast Dashboard";
}

<div class="dashboard-container">
    <h1>Profit Forecast Dashboard</h1>

    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <!-- Display error message if no data is available -->
        <div class="alert alert-warning modern-alert">
            @ViewBag.ErrorMessage
        </div>
    }
    else
    {
        <!-- Table to display all products and their profits for the current month -->
        <h2>Products Profit Summary (Current Month)</h2>
        <div class="table-wrapper modern-table-wrapper">
            <table class="table table-striped table-hover modern-table">
                <thead>
                    <tr>
                        <th>Product Name</th>
                        <th>Total Quantity Sold (Current Month)</th>
                        <th>Total Profit (Current Month)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in ViewBag.ProductsSold)
                    {
                        <tr>
                            <td>@product.ProductName</td>
                            <td>@product.TotalQuantity</td>
                            <td>$@product.Profit.ToString("0.00")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Chart to display current month and forecasted profits -->
        <h2>Current vs Forecasted Profits</h2>
        <div class="chart-wrapper modern-chart-wrapper">
            <canvas id="profitsComparisonChart"></canvas>
        </div>
    }
</div>

<!-- Merged Modern CSS Styling -->
<style>
    body {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f5f5f5;
        margin: 0;
        padding: 0;
    }

    .dashboard-container {
        background-color: #fff;
        padding: 40px 30px;
        border-radius: 10px;
        box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.1);
        margin: 40px auto;
        max-width: 1200px;
        width: 90%;
        text-align: center;
    }

    h1 {
        color: #ff9800;
        font-size: 3rem;
        font-weight: 600;
        margin-bottom: 30px;
    }

    h2 {
        text-align: center;
        color: #424242;
        margin-top: 20px;
        margin-bottom: 20px;
        font-size: 1.8rem;
        font-weight: 500;
    }

    .modern-alert {
        color: #fff;
        background-color: #f44336;
        padding: 15px;
        border-radius: 8px;
        font-size: 1.2rem;
    }

    .modern-table-wrapper {
        margin-bottom: 40px;
        overflow-x: auto;
    }

    .modern-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 1.1rem;
    }

        .modern-table thead {
            background-color: #ff9800;
            color: #fff;
        }

        .modern-table th, .modern-table td {
            padding: 15px;
            text-align: center;
        }

        .modern-table tbody tr:hover {
            background-color: #fbe9e7;
        }

        .modern-table tbody tr:nth-child(odd) {
            background-color: #fafafa;
        }

    .modern-chart-wrapper {
        margin: 30px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        max-width: 100%;
        width: 100%;
        height: auto;
    }

    canvas {
        max-width: 100% !important;
        height: 400px !important;
    }
</style>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var ctx = document.getElementById('profitsComparisonChart').getContext('2d');
        var profitsComparisonChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(ViewBag.ProductNames)), // Use serialized list of product names
                datasets: [
                    {
                        label: 'Current Month Profits',
                        data: @Html.Raw(Json.Serialize(ViewBag.CurrentMonthProfits)),
                        backgroundColor: 'rgba(54, 162, 235, 0.7)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'Forecasted Next Month Profits',
                        data: @Html.Raw(Json.Serialize(ViewBag.ForecastedProfits)),
                        backgroundColor: 'rgba(255, 159, 64, 0.7)',
                        borderColor: 'rgba(255, 99, 71, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true, // Ensures that the graph starts at 0
                        suggestedMin: 0, // Suggest a minimum value for flexibility
                        suggestedMax: Math.max(
                            Math.max(...@Html.Raw(Json.Serialize(ViewBag.CurrentMonthProfits))),
                            Math.max(...@Html.Raw(Json.Serialize(ViewBag.ForecastedProfits)))
                        ) * 1.2, // Dynamically adjust max based on the highest profit value with a buffer (20%)
                        ticks: {
                            color: '#424242' // Customize tick color
                        }
                    },
                    x: {
                        ticks: {
                            color: '#424242' // Customize tick color
                        }
                    }
                },
                responsive: true,
                maintainAspectRatio: false
            }
        });
    </script>
}
